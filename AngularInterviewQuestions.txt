Angular can use NGRX to manage state and is a combination of 5 key elements 

NgRx stands for Angular Reactive Extensions

Store : The apllication state is maintained in the store it is immutable. 
Selectors: Angular components can subscribe to the store and get updates through selectors. 
Reducers: reducers are responsble for handingling the transition.
Actions: Actions modify the state of the store by using reducers
Effects: Effects are the results of actions. Also, they can be used to listen for particular action types and run when the action happens.

Services in angular 

Simply put, services in Angular let you define code or functionalities that are then accessible and reusable in many other components in your Angular project. Services help you with the abstraction of logic and data that is hosted independently but can be shared across other components.

key components of angular 

Component: These are the basic building blocks of angular application to control HTML views.
Modules: An angular module is set of angular basic building blocks like component, directives, services etc. An application is divided into logical pieces and each piece of code is called as "module" which perform a single task.
Templates: This represent the views of an Angular application.
Services: It is used to create components which can be shared across the entire application.
Metadata: This can be used to add more data to an Angular class.


What are directives? 

Directives add behaviour to an existing DOM element or an existing component instance.

Diffreence bewtween component and directive 

Component 
- to regsister use @Component meta data annotation 
- typically used to create Ui widgets 
- breaks up application into smaller components 
only one per DOM elemeent 

Directive 
- to register use the @directive annotation 
- used to add beahvior to an existing dom element 
- used to design reusable compononents 

Lifecycle methods available in Angular 

he description of each lifecycle method is as below,

ngOnChanges: When the value of a data bound property changes, then this method is called.
ngOnInit: This is called whenever the initialization of the directive/component after Angular first displays the data-bound properties happens.
ngDoCheck: This is for the detection and to act on changes that Angular can't or won't detect on its own.
ngAfterContentInit: This is called in response after Angular projects external content into the component's view.
ngAfterContentChecked: This is called in response after Angular checks the content projected into the component.
ngAfterViewInit: This is called in response after Angular initializes the component's views and child views.
ngAfterViewChecked: This is called in response after Angular checks the component's views and child views.
ngOnDestroy: This is the cleanup phase just before Angular destroys the directive/component.

DataBinding 

Data binding is a core concept in Angular and allows to define communication between a component and the DOM, making it very easy to define interactive applications without worrying about pushing and pulling data. There are four forms of data binding(divided as 3 categories) which differ in the way the data is flowing.

What is a service?

A service is used when a common functionality needs to be provided to various modules. Services allow for greater separation of concerns for your application and better modularity by allowing you to extract common functionality out of components.

What is the purpose of async pipe?
The AsyncPipe subscribes to an observable or promise and returns the latest value it has emitted. When a new value is emitted, the pipe marks the component to be checked for changes.

What is the purpose of ngFor directive?
We use Angular ngFor directive in the template to display each item in the list. For example, here we iterate over list of users


What are pipes?

A pipe takes in data as input and transforms it to a desired output. For example, let us take a pipe to transform a component's birthday property into a human-friendly date using date pipe.

What is the difference between pure and impure pipe?

A pure pipe is only called when Angular detects a change in the value or the parameters passed to a pipe. For example, any changes to a primitive input value (String, Number, Boolean, Symbol) or a changed object reference (Date, Array, Function, Object). An impure pipe is called for every change detection cycle no matter whether the value or parameters changes. i.e, An impure pipe is called often, as often as every keystroke or mouse-move.

What are observables?

Observables are declarative which provide support for passing messages between publishers and subscribers in your application. They are mainly used for event handling, asynchronous programming, and handling multiple values. In this case, you define a function for publishing values, but it is not executed until a consumer subscribes to it. The subscribed consumer then receives notifications until the function completes, or until they unsubscribe.

What is subscribing?

An Observable instance begins publishing values only when someone subscribes to it. So you need to subscribe by calling the subscribe() method of the instance, passing an observer object to receive the notifications.

Let's take an example of creating and subscribing to a simple observable, with an observer that logs the received message to the console.

Explain Tuples in Typescript With Example

Tuples are a collection of values that are diverse. It allows for the storage of many fields of various sorts. Tuples can also be used as function parameters.

There are instances when it is necessary to save a collection of values of various types. Arrays will not suffice in this situation. TypeScript provides a data type called tuple that aids in this endeavor.

What is Anonymous Function in TypeScript?

Anonymous functions are those that have no identifier (function name) attached to them. At runtime, these functions are dynamically declared. Anonymous functions, like normal functions, can accept inputs and return outputs. After its initial creation, an anonymous function is normally inaccessible. An anonymous function can be assigned to variables.

What are Mixins?

Combining simpler partial classes is a popular approach of constructing classes from reusable components. For languages like Scala, you may be familiar with the concept of mixins or characteristics.

To extend a base class, the design relies on generics and class inheritance. The finest mixin support in TypeScript is provided through the class expression pattern.

We have a class where mixins are applied on top of it.

What is Namespace and how to declare it?


The namespace is used to group functionalities logically. To enable a single or a group of linked functionalities, a namespace can include interfaces, classes, functions, and variables.

The namespace keyword, followed by the namespace name, can be used to construct a namespace. Curly brackets can be used to define all interfaces, classes, and other objects.

Syntax: 

namespace <name>

{   



 What are Rest Parameters in Typescript?

You can use rest parameters when the number of parameters that a function will get is unknown or varies.
The rest parameter can take zero or more parameters. The compiler will generate an array of arguments containing the name of the rest parameter.